{"ast":null,"code":"var _jsxFileName = \"/home/matt/projects/split nft game/src/components/MyNFTs.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport \"./gallery/card.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst MyNFTs = ({\n  currentAccount\n}) => {\n  _s();\n\n  const [assets, setAssets] = useState([]);\n  useEffect(() => {\n    const fetchAssets = async () => {\n      try {\n        if (currentAccount[0].length > 0) {\n          const {\n            data\n          } = await axios.get(\"https://api.opensea.io/api/v1/assets\", {\n            params: {\n              owner: currentAccount[0].toString(),\n              order_direction: \"desc\",\n              offset: \"0\",\n              limit: \"20\"\n            }\n          });\n          const filterAssets = data.assets.filter(asset => {\n            if (!asset.name || !asset.token_id || !asset.image_url) {\n              return null;\n            }\n\n            return asset;\n          });\n          setAssets(filterAssets);\n        }\n      } catch (error) {\n        console.log(error);\n      }\n    };\n\n    fetchAssets();\n  }, [currentAccount]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: \"flex\",\n      flexFlow: \"row wrap\",\n      alignItems: \"center\",\n      justifyContent: \"center\"\n    },\n    children: [assets.length > 0 ? assets.map(asset => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          class: \"card\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            class: \"card-top\",\n            children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n              children: asset.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 53,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                class: \"card-body\",\n                children: [/*#__PURE__*/_jsxDEV(\"img\", {\n                  src: asset.image_url,\n                  alt: \"nft\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 56,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n                  children: \"Description\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 58,\n                  columnNumber: 23\n                }, this), asset.description]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 55,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 54,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 15\n        }, this)\n      }, asset.token_id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 13\n      }, this);\n    }) : /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"No NFTs On OpenSea\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }, this), console.log(assets)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n};\n\n_s(MyNFTs, \"TkvTObijVMpqXANY4UjdWlfk3qg=\");\n\n_c = MyNFTs;\nexport default MyNFTs;\n\nvar _c;\n\n$RefreshReg$(_c, \"MyNFTs\");","map":{"version":3,"sources":["/home/matt/projects/split nft game/src/components/MyNFTs.js"],"names":["useEffect","useState","axios","MyNFTs","currentAccount","assets","setAssets","fetchAssets","length","data","get","params","owner","toString","order_direction","offset","limit","filterAssets","filter","asset","name","token_id","image_url","error","console","log","display","flexFlow","alignItems","justifyContent","map","description"],"mappings":";;;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAO,oBAAP;;;AAEA,MAAMC,MAAM,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAwB;AAAA;;AACrC,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBL,QAAQ,CAAC,EAAD,CAApC;AACAD,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMO,WAAW,GAAG,YAAY;AAC9B,UAAI;AACF,YAAIH,cAAc,CAAC,CAAD,CAAd,CAAkBI,MAAlB,GAA2B,CAA/B,EAAkC;AAChC,gBAAM;AAAEC,YAAAA;AAAF,cAAW,MAAMP,KAAK,CAACQ,GAAN,CACrB,sCADqB,EAErB;AACEC,YAAAA,MAAM,EAAE;AACNC,cAAAA,KAAK,EAAER,cAAc,CAAC,CAAD,CAAd,CAAkBS,QAAlB,EADD;AAENC,cAAAA,eAAe,EAAE,MAFX;AAGNC,cAAAA,MAAM,EAAE,GAHF;AAINC,cAAAA,KAAK,EAAE;AAJD;AADV,WAFqB,CAAvB;AAWA,gBAAMC,YAAY,GAAGR,IAAI,CAACJ,MAAL,CAAYa,MAAZ,CAAoBC,KAAD,IAAW;AACjD,gBAAI,CAACA,KAAK,CAACC,IAAP,IAAe,CAACD,KAAK,CAACE,QAAtB,IAAkC,CAACF,KAAK,CAACG,SAA7C,EAAwD;AACtD,qBAAO,IAAP;AACD;;AACD,mBAAOH,KAAP;AACD,WALoB,CAArB;AAOAb,UAAAA,SAAS,CAACW,YAAD,CAAT;AACD;AACF,OAtBD,CAsBE,OAAOM,KAAP,EAAc;AACdC,QAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD;AACF,KA1BD;;AA2BAhB,IAAAA,WAAW;AACZ,GA7BQ,EA6BN,CAACH,cAAD,CA7BM,CAAT;AA+BA,sBACE;AACE,IAAA,KAAK,EAAE;AACLsB,MAAAA,OAAO,EAAE,MADJ;AAELC,MAAAA,QAAQ,EAAE,UAFL;AAGLC,MAAAA,UAAU,EAAE,QAHP;AAILC,MAAAA,cAAc,EAAE;AAJX,KADT;AAAA,eAQGxB,MAAM,CAACG,MAAP,GAAgB,CAAhB,GACCH,MAAM,CAACyB,GAAP,CAAYX,KAAD,IAAW;AACpB,0BACE;AAAA,+BACE;AAAK,UAAA,KAAK,EAAC,MAAX;AAAA,iCACE;AAAK,YAAA,KAAK,EAAC,UAAX;AAAA,oCACE;AAAA,wBAAKA,KAAK,CAACC;AAAX;AAAA;AAAA;AAAA;AAAA,oBADF,eAEE;AAAA,qCACE;AAAK,gBAAA,KAAK,EAAC,WAAX;AAAA,wCACE;AAAK,kBAAA,GAAG,EAAED,KAAK,CAACG,SAAhB;AAA2B,kBAAA,GAAG,EAAC;AAA/B;AAAA;AAAA;AAAA;AAAA,wBADF,eAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAHF,EAIGH,KAAK,CAACY,WAJT;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,oBAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF,SAAUZ,KAAK,CAACE,QAAhB;AAAA;AAAA;AAAA;AAAA,cADF;AAiBD,KAlBD,CADD,gBAqBC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YA7BJ,EAgCGG,OAAO,CAACC,GAAR,CAAYpB,MAAZ,CAhCH;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAoCD,CArED;;GAAMF,M;;KAAAA,M;AAuEN,eAAeA,MAAf","sourcesContent":["import { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport \"./gallery/card.css\";\n\nconst MyNFTs = ({ currentAccount }) => {\n  const [assets, setAssets] = useState([]);\n  useEffect(() => {\n    const fetchAssets = async () => {\n      try {\n        if (currentAccount[0].length > 0) {\n          const { data } = await axios.get(\n            \"https://api.opensea.io/api/v1/assets\",\n            {\n              params: {\n                owner: currentAccount[0].toString(),\n                order_direction: \"desc\",\n                offset: \"0\",\n                limit: \"20\",\n              },\n            }\n          );\n          const filterAssets = data.assets.filter((asset) => {\n            if (!asset.name || !asset.token_id || !asset.image_url) {\n              return null;\n            }\n            return asset;\n          });\n\n          setAssets(filterAssets);\n        }\n      } catch (error) {\n        console.log(error);\n      }\n    };\n    fetchAssets();\n  }, [currentAccount]);\n\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        flexFlow: \"row wrap\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n      }}\n    >\n      {assets.length > 0 ? (\n        assets.map((asset) => {\n          return (\n            <div key={asset.token_id}>\n              <div class=\"card\">\n                <div class=\"card-top\">\n                  <h1>{asset.name}</h1>\n                  <div>\n                    <div class=\"card-body\">\n                      <img src={asset.image_url} alt=\"nft\" />\n\n                      <h3>Description</h3>\n                      {asset.description}\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          );\n        })\n      ) : (\n        <h1>No NFTs On OpenSea</h1>\n      )}\n\n      {console.log(assets)}\n    </div>\n  );\n};\n\nexport default MyNFTs;\n"]},"metadata":{},"sourceType":"module"}